// Generated by CoffeeScript 1.3.3
(function() {
  var Q, bcrypt, crypto, db, express, fs, mongo, monk, passport, router, sha;

  express = require('express');

  fs = require('fs');

  router = express.Router();

  passport = require('passport');

  bcrypt = require('bcryptjs');

  crypto = require('crypto');

  Q = require('q');

  mongo = require('mongodb');

  monk = require('monk');

  db = monk('localhost:27017/cyc');

  sha = require('../sha256.js');

  router.get('/', function(req, res, next) {
    return res.render('index', {
      title: 'CYC'
    });
  });

  router.get('/about', function(req, res, next) {
    var response;
    response = {
      'text': ''
    };
    fs.readFile('./public/strings/about.txt', 'utf8', function(err, data) {
      if (err) {
        console.log(err);
        throw err;
      }
      response['text'] = data;
      console.log(response);
      res.json(response);
    });
  });

  router.get('/history', function(req, res, next) {
    var response;
    response = {
      'text': ''
    };
    fs.readFile('./public/strings/history.txt', 'utf8', function(err, data) {
      if (err) {
        console.log(err);
        throw err;
      }
      response['text'] = data;
      res.json(response);
    });
  });

  router.get('/volunteer', function(req, res, next) {
    return res.json({
      blarg: 'blarg'
    });
  });

  router.post('/register', function(req, res, next) {
    var users;
    console.log(req.body);
    users = db.get('users');
    users.find({
      username: req.body.username
    }, {}, function(e, docs) {
      var token;
      console.log('DOCS');
      console.log(docs);
      if (docs.length > 0) {
        console.log('user #{docs[0].username} exists');
        res.json({
          loggedin: false
        });
      } else {
        console.log('creating new user');
        console.log('passedhash__' + req.body.passhash + '__');
        token = crypto.randomBytes(16).toString('hex');
        users.insert({
          username: req.body.username,
          passhash: req.body.passhash,
          email: req.body.email,
          token: token
        });
        res.json({
          loggedin: true,
          token: token
        });
      }
    });
  });

  router.post('/login', function(req, res, next) {
    var response_data, users;
    console.log('login request from ' + req.body.username);
    console.log('with passhash:__' + req.body.passhash + '__');
    users = db.get('users');
    response_data = {};
    users.find({
      username: req.body.username
    }, {}, function(e, docs) {
      var token;
      console.log(docs);
      if (docs.length > 0) {
        console.log('[+] found user: ' + docs[0].username);
        if (docs[0].passhash === req.body.passhash) {
          console.log('[+] correct password');
          token = crypto.randomBytes(16).toString('hex');
          users.update({
            username: req.body.username
          }, {
            $set: {
              loggedin: true,
              token: token
            }
          });
          response_data['token'] = token;
          response_data['user_type'] = docs[0].user_type;
        } else {
          console.log('[-] incorrect password');
          users.update({
            username: req.body.username
          }, {
            $set: {
              loggedin: false,
              token: ''
            }
          });
          response_data['token'] = false;
        }
        console.log('sending response ' + response_data);
        res.json({
          response_data: response_data
        });
      } else {
        console.log('User not found');
        return res.status(500).send('User not found');
      }
    });
    console.log('exiting login');
  });

  router.post('/logout', function(req, res, next) {
    var users;
    users = db.get('users');
    console.log(req.body);
    return users.find({
      username: req.body.username,
      token: req.body.token
    }, {}, function(e, docs) {
      console.log(docs);
      if (docs.length > 0) {
        if (docs[0].loggedin) {
          users.update({
            username: req.body.username
          }, {
            $set: {
              loggedin: false,
              token: ''
            }
          });
          return res.json({
            success: true
          });
        }
      } else {
        console.log('Attempted illegal logout for #{req.body.username}');
        return res.status(500).send('logout failure');
      }
    });
  });

  module.exports = router;

}).call(this);
