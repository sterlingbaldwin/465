// Generated by CoffeeScript 1.3.3
(function() {
  var Q, bcrypt, crypto, db, express, fs, mongo, monk, passport, router;

  express = require('express');

  fs = require('fs');

  router = express.Router();

  passport = require('passport');

  bcrypt = require('bcryptjs');

  crypto = require('crypto');

  Q = require('q');

  mongo = require('mongodb');

  monk = require('monk');

  db = monk('localhost:27017/cyc');

  router.get('/', function(req, res, next) {
    return res.render('index', {
      title: 'CYC'
    });
  });

  router.get('/about', function(req, res, next) {
    var response;
    response = {
      'text': ''
    };
    fs.readFile('./public/strings/about.txt', 'utf8', function(err, data) {
      if (err) {
        console.log(err);
        throw err;
      }
      response['text'] = data;
      console.log(response);
      res.json(response);
    });
  });

  router.get('/history', function(req, res, next) {
    var response;
    response = {
      'text': ''
    };
    fs.readFile('./public/strings/history.txt', 'utf8', function(err, data) {
      if (err) {
        console.log(err);
        throw err;
      }
      response['text'] = data;
      res.json(response);
    });
  });

  router.get('/volunteer', function(req, res, next) {
    return res.json({
      blarg: 'blarg'
    });
  });

  router.post('/register', function(req, res, next) {
    var users;
    console.log(req.body);
    users = db.get('users');
    users.find({
      username: req.username
    }, {}, function(e, docs) {
      var token;
      console.log('DOCS');
      console.log(docs);
      if (docs.length > 0) {
        console.log('user exists');
        res.json({
          loggedin: false
        });
      } else {
        console.log('creating new user');
        token = crypto.randomBytes(16).toString('hex');
        users.insert({
          username: req.username,
          passhash: bcrypt.hashSync(req.passhash, 10),
          email: req.email,
          token: token
        });
        res.json({
          loggedin: true,
          token: token
        });
      }
    });
  });

  router.post('/login', function(req, res, next) {
    var token;
    token = functions.signin(res.params.username, res.params.token);
    if (token) {
      return res.json({
        loggedin: true,
        token: token
      });
    } else {
      return res.json({
        loggedin: false
      });
    }
  });

  router.get('/logout', function(req, res) {
    var users;
    users = db.get('users');
    return users.find({
      username: req.username
    }, {}, function(e, docs) {
      if (docs.length > 0 && docs.loggedin && docs.token === req.token) {
        users.update({
          username: username
        }, {
          $set: {
            loggedin: false
          }
        });
        return res.json({
          success: true
        });
      } else {
        console.log('Attempted illegal logout from {username}');
        return res.status(500).send('logout failure');
      }
    });
  });

  module.exports = router;

}).call(this);
